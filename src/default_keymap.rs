use std::collections::HashMap;

lazy_static::lazy_static! {
    pub static ref DEFAULT_LEVEL1_MAP: HashMap<u32, char> = [
        (1, '\u{1b}'),
        // (2, '1'),
        // (3, '2'),
        // (4, '3'),
        // (5, '4'),
        // (6, '5'),
        // (7, '6'),
        // (8, '7'),
        // (9, '8'),
        // (10, '9'),
        // (11, '0'),
        // (12, '-'),
        // (13, '='),
        (14, '\u{8}'),
        (15,'\t'),
        // (16, 'q'),
        // (17, 'w'),
        // (18, 'e'),
        // (19, 'r'),
        // (20, 't'),
        // (21, 'y'),
        // (22, 'u'),
        // (23, 'i'),
        // (24, 'o'),
        // (25, 'p'),
        // (26, '['),
        // (27, ']'),
        (28,'\r'),
        // (30, 'a'),
        // (31, 's'),
        // (32, 'd'),
        // (33, 'f'),
        // (34, 'g'),
        // (35, 'h'),
        // (36, 'j'),
        // (37, 'k'),
        // (38, 'l'),
        // (39, ';'),
        // (40, '\''),
        // (41, '`'),
        (43, '\\'),
        // (44, 'z'),
        // (45, 'x'),
        // (46, 'c'),
        // (47, 'v'),
        // (48, 'b'),
        // (49, 'n'),
        // (50, 'm'),
        // (51, ','),
        // (52, '.'),
        // (53, '/'),
        (57, ' '),
        (86,'<'),
        (101,'\n'),
        (111, '\u{7f}'),
        (117,'='),
        (118, '±'),
        (179, '('),
        (180,')'),
        (434, '$'),
        (435, '€'),
    ].into();
}

lazy_static::lazy_static! {
    pub static ref DEFAULT_LEVEL2_MAP: HashMap<u32, char> = [
        // (2, '1'),
        // (3, '2'),
        // (4, '3'),
        // (5, '4'),
        // (6, '5'),
        // (7, '6'),
        // (8, '7'),
        // (9, '8'),
        // (10, '9'),
        // (11, '0'),
        // (12, '-'),
        (14, '\u{8}'),
        // (16, 'q'),
        // (17, 'w'),
        // (18, 'e'),
        // (19, 'r'),
        // (20, 't'),
        // (21, 'y'),
        // (22, 'u'),
        // (23, 'i'),
        // (24, 'o'),
        // (25, 'p'),
        // (26, '['),
        // (30, 'a'),
        // (31, 's'),
        // (32, 'd'),
        // (33, 'f'),
        // (34, 'g'),
        // (35, 'h'),
        // (36, 'j'),
        // (37, 'k'),
        // (38, 'l'),
        // (39, ';'),
        // (40, '\''),
        // (41, '`'),
        (43, '|'),
        // (44, 'z'),
        // (45, 'x'),
        // (46, 'c'),
        // (47, 'v'),
        // (48, 'b'),
        // (49, 'n'),
        // (50, 'm'),
        // (51, ','),
        // (52, '.'),
        // (53, '/'),
        // (57, ' '),
        (86,'>'),
    ].into();
}

lazy_static::lazy_static! {
    pub static ref DEFAULT_LEVEL3_MAP: HashMap<u32, char> = [
        (86, '|'),
    ].into();
}

lazy_static::lazy_static! {
    pub static ref DEFAULT_LEVEL4_MAP: HashMap<u32, char> = [
        (86, '¦'),
    ].into();
}

lazy_static::lazy_static! {
    pub static ref DEFAULT_LEVEL1_KEYPADMAP: HashMap<u32, char> = [
        (55, '*'),
        (74, '-'),
        (78, '+'),
        (96,'\r'),
        (98, '/'),
        (121,'.'),
    ].into();
}

lazy_static::lazy_static! {
    pub static ref DEFAULT_LEVEL2_KEYPADMAP: HashMap<u32, char> = [
        (55, '*'),
        (71, '7'),
        (72, '8'),
        (73, '9'),
        (74, '-'),
        (75, '4'),
        (76, '5'),
        (77, '6'),
        (78, '+'),
        (79, '1'),
        (80, '2'),
        (81, '3'),
        (82, '0'),
        (83, '.'),
        (98, '/'),
        (121,'.'),
    ].into();
}

lazy_static::lazy_static! {
    pub static ref DEFAULT_LEVEL3_KEYPADMAP: HashMap<u32, char> = [
        (55, '*'),
        (74, '-'),
        (78, '+'),
        (98, '/'),
    ].into();
}

lazy_static::lazy_static! {
    pub static ref DEFAULT_LEVEL4_KEYPADMAP: HashMap<u32, char> = [
        (55, '*'),
        (74, '-'),
        (78, '+'),
        (98, '/'),
    ].into();
}
